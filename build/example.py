# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.2
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _example
else:
    import _example

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


class thang_data(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    x = property(_example.thang_data_x_get, _example.thang_data_x_set)
    y = property(_example.thang_data_y_get, _example.thang_data_y_set)

    def __init__(self):
        _example.thang_data_swiginit(self, _example.new_thang_data())
    __swig_destroy__ = _example.delete_thang_data

# Register thang_data in _example:
_example.thang_data_swigregister(thang_data)

class thang(object):
    r"""

    Example C++ class showing SWIG, cmake and C++ integration.
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""			Constructor"""
        _example.thang_swiginit(self, _example.new_thang())
    __swig_destroy__ = _example.delete_thang

    def one(self) -> "int":
        r"""
        			Always return 1.
        			:rtype: int
        :return: 1
        """
        return _example.thang_one(self)

    def echo(self, message: "std::string") -> "std::string":
        r"""
        			Always return the parameter (example of string handling)
        			:type message: string
        :param message: [in] The string to return
            			:rtype: string
        :return: Returns a copy of the parameter
        """
        return _example.thang_echo(self, message)

    def get_data(self) -> "thang_data":
        r"""
        			Example method that returns an object
        			:rtype: :py:class:`thang_data`
        :return: a thang_data object
        """
        return _example.thang_get_data(self)

# Register thang in _example:
_example.thang_swigregister(thang)


def factorial(n: "int") -> "int":
    r"""
    		Factorial of n
    		:type n: int
    :param n: [in] The number from which to compute n!
        		:rtype: int
    :return: n!
    """
    return _example.factorial(n)

def six() -> "int":
    r"""
    		Always return 6.
    		:rtype: int
    :return: 6
    """
    return _example.six()


